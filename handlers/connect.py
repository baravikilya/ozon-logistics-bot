"""
Ozon connection handler for Ozon Logistics Bot.
Handles connecting Ozon Seller API credentials (stub implementation).
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router = Router()


class ConnectStates(StatesGroup):
    """States for Ozon connection flow."""
    waiting_for_client_id = State()
    waiting_for_api_key = State()


@router.callback_query(F.data == "menu_connect")
async def start_connect(callback: CallbackQuery, state: FSMContext) -> None:
    """
    Start Ozon connection process.
    Ask user for Client ID.
    """
    await state.clear()  # Clear any previous state

    text = (
        "üîó <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Ozon Seller</b>\n\n"
        "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Ozon Seller Center:\n\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>Client ID</b> –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API:"
    )

    await callback.message.edit_text(text, parse_mode="HTML")
    await state.set_state(ConnectStates.waiting_for_client_id)
    await callback.answer()


@router.message(ConnectStates.waiting_for_client_id)
async def process_client_id(message: Message, state: FSMContext) -> None:
    """
    Process Client ID input and ask for API Key.
    """
    client_id = message.text.strip()

    # Basic validation (stub)
    if not client_id or len(client_id) < 10:
        await message.reply(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> Client ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return

    # Store client_id in state
    await state.update_data(client_id=client_id)

    text = (
        "‚úÖ Client ID –ø—Ä–∏–Ω—è—Ç!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>API Key</b> (—Ç–æ–∫–µ–Ω) —Å –ø—Ä–∞–≤–∞–º–∏ Read-Only:"
    )

    await message.reply(text, parse_mode="HTML")
    await state.set_state(ConnectStates.waiting_for_api_key)


@router.message(ConnectStates.waiting_for_api_key)
async def process_api_key(message: Message, state: FSMContext) -> None:
    """
    Process API Key input and complete connection (stub).
    """
    api_key = message.text.strip()

    # Basic validation (stub)
    if not api_key or len(api_key) < 20:
        await message.reply(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> API Key –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return

    # Get stored data
    data = await state.get_data()
    client_id = data.get("client_id")

    # Here would be actual API validation (stub for now)
    success_text = (
        "‚úÖ <b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!</b>\n\n"
        f"Client ID: <code>{client_id}</code>\n"
        f"API Key: <code>{'*' * len(api_key)}</code>\n\n"
        "üîÑ <i>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è... (–ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ)</i>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )

    await message.reply(success_text, parse_mode="HTML")

    # Clear state
    await state.clear()

    # TODO: Save to database when implemented
    # TODO: Validate credentials with Ozon API