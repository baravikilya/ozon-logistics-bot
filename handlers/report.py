"""
Report generation handler for Ozon Logistics Bot.
Handles report requests and period selection (stub implementation).
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()


@router.callback_query(F.data == "menu_report")
async def start_report_generation(callback: CallbackQuery) -> None:
    """
    Start report generation process.
    Check prerequisites and show period selection.
    """
    # Mock prerequisite checks (will be replaced with database queries)
    ozon_connected = False  # Mock: not connected
    subscription_active = True  # Mock: trial active

    if not ozon_connected:
        error_text = (
            "‚ùå <b>–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</b>\n\n"
            "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å Ozon Seller API\n"
            "2. –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å Ozon'"
        )
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Ozon", callback_data="menu_connect")
        keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")

        await callback.message.edit_text(
            error_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()
        return

    if not subscription_active:
        error_text = (
            "‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞</b>\n\n"
            "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã."
        )
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="menu_subscribe")
        keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")

        await callback.message.edit_text(
            error_text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()
        return

    # Prerequisites met, show period selection
    period_text = (
        "üìä <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂:\n\n"
        "‚úÖ –ú–∞–≥–∞–∑–∏–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω\n"
        "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n\n"
        "–û—Ç—á–µ—Ç –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ –∏ –ø—Ä–æ–¥–∞–∂–∞—Ö."
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="set_period_7")
    keyboard.button(text="üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 28 –¥–Ω–µ–π", callback_data="set_period_28")
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")

    keyboard.adjust(1)

    await callback.message.edit_text(
        period_text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("set_period_"))
async def process_period_selection(callback: CallbackQuery) -> None:
    """Process period selection and start report generation (stub)."""
    period_days = int(callback.data.split("_")[-1])

    processing_text = (
        f"üîÑ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞</b>\n\n"
        f"–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_days} –¥–Ω–µ–π\n\n"
        "üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö...\n"
        "üöö –†–∞—Å—á–µ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏...\n"
        "üìà –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞...\n\n"
        "<i>–û—Ç—á–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ (–ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ)</i>"
    )

    # Remove keyboard during processing
    await callback.message.edit_text(
        processing_text,
        reply_markup=None,
        parse_mode="HTML"
    )
    await callback.answer()

    # Mock processing delay
    # In real implementation, this would call the report service
    # await asyncio.sleep(2)

    # Mock completion
    completion_text = (
        f"‚úÖ <b>–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!</b>\n\n"
        f"üìä –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_days} –¥–Ω–µ–π\n"
        "üìé Excel-—Ñ–∞–π–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω\n\n"
        "<i>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ</i>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π."
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìä –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="menu_report")
    keyboard.button(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")

    await callback.message.edit_text(
        completion_text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "back_to_main")
async def back_to_main_from_report(callback: CallbackQuery) -> None:
    """Go back to main menu from report section."""
    await callback.message.edit_text(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
        reply_markup=None
    )
    await callback.answer()