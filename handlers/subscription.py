"""
Subscription management handler for Ozon Logistics Bot.
Handles subscription status display and payment options (stub implementation).
"""

from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core.config import settings

router = Router()


@router.callback_query(F.data == "menu_subscribe")
async def show_subscription_status(callback: CallbackQuery) -> None:
    """
    Show current subscription status.
    In MVP this is a stub showing trial status.
    """
    # Mock user data (will be replaced with database query)
    trial_start = datetime.utcnow() - timedelta(days=2)  # Mock: trial started 2 days ago
    trial_end = trial_start + timedelta(days=settings.trial_period_days)
    days_left = (trial_end - datetime.utcnow()).days

    if days_left > 0:
        status_text = (
            "üí≥ <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            f"üìÖ Trial-–ø–µ—Ä–∏–æ–¥ –¥–æ: {trial_end.strftime('%d.%m.%Y')}\n"
            f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
            "–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è trial-–ø–µ—Ä–∏–æ–¥–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
        )
    else:
        status_text = (
            "üí≥ <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            "‚ùå Trial-–ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫!\n\n"
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
        )

    # Create subscription menu keyboard
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å / –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="pay_menu")
    keyboard.button(text="üîÑ –û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", callback_data="cancel_auto_renew")  # Stub
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")

    keyboard.adjust(1)

    await callback.message.edit_text(
        status_text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "pay_menu")
async def show_payment_options(callback: CallbackQuery) -> None:
    """Show payment options menu."""
    payment_text = (
        "üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        f"1 –º–µ—Å—è—Ü: {settings.subscription_price_1m} ‚ÇΩ\n"
        f"6 –º–µ—Å—è—Ü–µ–≤: {settings.subscription_price_6m} ‚ÇΩ (—Å–∫–∏–¥–∫–∞!)\n"
        f"1 –≥–æ–¥: {settings.subscription_price_1y} ‚ÇΩ (–º–∞–∫—Å. —Å–∫–∏–¥–∫–∞!)\n\n"
        "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ YooKassa (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ)."
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text=f"1 –º–µ—Å—è—Ü ({settings.subscription_price_1m} ‚ÇΩ)", callback_data="pay_1m")
    keyboard.button(text=f"6 –º–µ—Å—è—Ü–µ–≤ ({settings.subscription_price_6m} ‚ÇΩ)", callback_data="pay_6m")
    keyboard.button(text=f"1 –≥–æ–¥ ({settings.subscription_price_1y} ‚ÇΩ)", callback_data="pay_1y")
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_subscribe")

    keyboard.adjust(1)

    await callback.message.edit_text(
        payment_text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("pay_"))
async def process_payment(callback: CallbackQuery) -> None:
    """Process payment selection (stub implementation)."""
    payment_type = callback.data

    # Mock payment processing
    if payment_type == "pay_1m":
        amount = settings.subscription_price_1m
        period = "1 –º–µ—Å—è—Ü"
    elif payment_type == "pay_6m":
        amount = settings.subscription_price_6m
        period = "6 –º–µ—Å—è—Ü–µ–≤"
    elif payment_type == "pay_1y":
        amount = settings.subscription_price_1y
        period = "1 –≥–æ–¥"
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞")
        return

    success_text = (
        f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
        f"–ü–µ—Ä–∏–æ–¥: {period}\n"
        f"–°—É–º–º–∞: {amount} ‚ÇΩ\n\n"
        "üîÑ <i>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ YooKassa... (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ)</i>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="menu_subscribe")

    await callback.message.edit_text(
        success_text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "cancel_auto_renew")
async def cancel_auto_renew(callback: CallbackQuery) -> None:
    """Cancel auto-renewal (stub)."""
    text = (
        "üîÑ <b>–û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è</b>\n\n"
        "<i>–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ</i>\n\n"
        "–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ."
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="menu_subscribe")

    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery) -> None:
    """Go back to main menu."""
    # This will trigger the start command handler
    await callback.message.edit_text(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
        reply_markup=None
    )
    await callback.answer()